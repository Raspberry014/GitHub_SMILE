Ответы на вопросы (Практическая работа №6)
Приложение React Native с прокручиваемым списком карточек "Видеоигры"

1. Обоснуйте свой выбор цветовой схемы для вашего приложения.
В приложении реализована автоматическая поддержка светлой и тёмной темы с использованием useColorScheme(). Цветовая схема основана на темах из react-native-paper, что обеспечивает комфортное восприятие контента как днём, так и ночью. Цвета адаптированы под системные настройки устройства.

2. Как реализована поддержка тёмной темы в React Native?
С помощью хука useColorScheme() определяется текущая тема (light или dark), и в зависимости от неё применяется соответствующая тема из react-native-paper.
const scheme = useColorScheme();
const theme = scheme === 'dark' ? DarkTheme : DefaultTheme;

3. Объясните структуру вашего проекта и организацию пакетов.
Проект состоит из App.js с FlatList и карточками, package.json с зависимостями. Установлены библиотеки: react-native-paper, react-native-web, react-dom. Вся логика находится в одном компоненте, так как объём небольшой.

4. Объясните структуру модели данных.
Модель — это массив facts[], каждый объект включает id, title, image (URL), description и date.

5. Как реализовано хранение данных в вашем приложении?
Данные хранятся внутри App.js как константа. Для более крупных приложений можно использовать API, AsyncStorage или SQLite.

6. Почему вы выбрали макет FlatList/Grid для отображения данных?
FlatList — производительное решение с поддержкой виртуализации, простое в использовании и адаптируется под разные экраны.

7. Какие стили props вы использовали и для какой цели?
margin, backgroundColor, fontSize, color и другие стили использовались для адаптации карточек под тёмную и светлую темы.

8. Объясните концепцию State в React и как вы её применили.
State — это данные, которые могут меняться во времени. В этом проекте прямое использование useState не требуется, но тема определяется через useColorScheme (реакция на системное состояние).

9. Как работает useState в React и где вы его применяли?
В этом проекте не применялся, но обычно используется для хранения состояния и обновления UI при изменениях.
const [visible, setVisible] = useState(false);

10. Какие принципы проектирования React Native вы применяли при разработке карточек?
Модульность (отдельный компонент карточки), использование FlatList, адаптивность, минимализм и современный UI.

11. Как организовано хранение изображений?
Изображения подгружаются по URL через свойство uri.
<Card.Cover source={{ uri: item.image }} />

12. Какой подход используется для загрузки изображений?
Прямой URL. При необходимости можно использовать кэширование или prefetch.

13. Как реализована обработка ошибок при загрузке данных?
В рамках проекта не реализовано. В реальных проектах можно использовать onError для Image или try-catch при работе с API.

14. Как организовано обновление данных в приложении?
Данные статичны, обновление не требуется. При использовании API можно задействовать useEffect и useState.

15. Каковы преимущества использования React Native Paper?
Быстрое создание UI, поддержка тем, согласованный стиль, меньше ручной стилизации.

16. Как организовано взаимодействие State Management и UI?
В этом проекте тема устройства влияет на UI через useColorScheme. В более сложных проектах применимы Redux, Context API и др.
