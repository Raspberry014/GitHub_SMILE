1. Что такое хуки в React Native и для чего используется хук useState?
Хуки — это функции, которые позволяют использовать внутренние возможности React в функциональных компонентах.
Хук useState используется для создания переменных состояния, отслеживания их и изменения при необходимости. Например, для хранения текущего индекса карточки в галерее или флага модального окна.

2. В чём разница между компонентами Button и TouchableOpacity?
Button — стандартный компонент, с фиксированным внешним видом и простым использованием.

TouchableOpacity — гибкий компонент, позволяющий создавать нажимаемые области вокруг любых элементов (например, изображений или текста), и даёт больше контроля над дизайном.

3. Какие встроенные компоненты React Native вы использовали в работе?
В данной работе использованы следующие компоненты:

View — контейнер для разметки

Text — для вывода текста

Image — для отображения изображений

Button — стандартные кнопки

TouchableOpacity — для обработки нажатий на изображение

Modal — всплывающее окно с описанием

Pressable — кнопка закрытия модального окна

4. Как реализовано отображение изображений в приложении?
С помощью компонента Image, который получает ссылку на изображение через свойство source:

jsx
<Image source={{ uri: game.imageUrl }} style={styles.image} />
5. Как организована структура компонентов в приложении?
Приложение состоит из одного функционального компонента App. Внутри него:

Хранится массив games[] с данными об играх

Используются хуки useState для управления текущим элементом и состоянием модального окна

Интерфейс содержит изображение, текст, кнопки и модальное окно

6. Как реализована логика переключения между элементами?
С помощью кнопок "Следующий" и "Предыдущий", которые меняют индекс в состоянии index.
Кнопки отключаются, если пользователь находится в начале или конце массива:

js
setIndex(index + 1); // следующий элемент
setIndex(index - 1); // предыдущий элемент
7. Как реализовано долгое нажатие на элемент?
Используется компонент TouchableOpacity с обработчиком onLongPress. При долгом нажатии изображение открывает модальное окно с описанием:

jsx
<TouchableOpacity onLongPress={() => setModalVisible(true)}>
8. Какие состояния присутствуют в приложении?
index — индекс текущего элемента в массиве

modalVisible — отображается ли модальное окно

9. Как происходит обновление состояния при взаимодействии с интерфейсом?
Состояния обновляются через вызов функций setIndex() и setModalVisible() при нажатии на кнопки и долгом нажатии на изображение. Это автоматически вызывает перерисовку интерфейса.

10. Почему важно правильно управлять состоянием в React Native приложении?
Потому что интерфейс приложения напрямую зависит от состояния.
Правильное управление гарантирует стабильную работу, предотвращает ошибки и обеспечивает актуальность отображаемых данных.